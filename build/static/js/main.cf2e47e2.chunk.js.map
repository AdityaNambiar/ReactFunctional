{"version":3,"sources":["components/FormElement.jsx","App.js","serviceWorker.js","index.js"],"names":["useState","data","updateData","useEffect","document","getElementById","innerText","fetch","method","then","resp","text","headers","body","JSON","stringify","style","borderColor","borderSize","borderStyle","type","name","onChange","e","target","value","onClick","console","log","catch","id","App","className","FormElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAEe,aAAO,IAAD,EACUA,mBAAS,yCADnB,mBACVC,EADU,KACJC,EADI,KA6CjB,OA3CAC,qBAAU,WACFC,SAASC,eAAe,UAAUC,UAAYL,IACpD,CAACA,IACHE,qBAAW,WACPI,MAAM,SAAU,CACZC,OAAQ,QAEXC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAM,SAAAC,GACHR,EAAWQ,QAEhB,IACHP,qBAAW,WACPI,MAAM,mCAAoC,CACtCC,OAAQ,OACRI,QAAS,CACL,eAAe,oBAEnBC,KAAMC,KAAKC,UAAU,CAAE,QAAW,2DAErCN,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAM,SAAAC,GACHR,EAAWQ,QAEhB,IAoBC,yBAAKM,MAAO,CACRC,YAAa,MACbC,WAAY,MACZC,YAAa,WAEb,8BACI,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAKrB,EAAWqB,EAAEC,OAAOC,UAClE,2BAAOL,KAAK,SAASC,KAAK,OAAOI,MAAM,aAAaC,QA1BhE,WAEIC,QAAQC,IAAI,SAAS3B,GACrBM,MAAM,YAAa,CACXC,OAAQ,OACRI,QAAS,CACL,eAAe,oBAEnBC,KAAMC,KAAKC,UAAU,CAAE,IAAMd,MAEpCQ,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAM,SAACC,GACJR,EAAWQ,MAEdmB,OAAO,SAACN,GACLI,QAAQC,IAAR,gCAAqCL,WAazC,yBAAKO,GAAG,UAAU7B,K,MC7CX8B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDyHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.cf2e47e2.chunk.js","sourcesContent":["import React, { useState, useEffect }from 'react';\n\nexport default () => {\n    const [data, updateData] = useState(\"Default value of data state variable.\"); \n    useEffect(() => {\n            document.getElementById('output').innerText = data;\n    },[data])\n    useEffect( () => {\n        fetch('/hello', {\n            method: 'GET'\n        })\n        .then(resp => resp.text())\n        .then( resp => {\n            updateData(resp);\n        })\n    }, [])\n    useEffect( () => {\n        fetch('/newRequiredRouteAfterDeployment', {\n            method: 'POST',\n            headers: {\n                'content-type':'application/json'\n            },\n            body: JSON.stringify({ \"newdata\": \"Hey client this is your newdata from our backend API\"})\n        })\n        .then(resp => resp.text())\n        .then( resp => {\n            updateData(resp);\n        })\n    }, [])\n    function sendData() {\n        \n        console.log(\"data: \",data);\n        fetch('/takeData', { \n                method: 'POST',\n                headers: {\n                    'Content-Type':'application/json'\n                },\n                body: JSON.stringify({ \"msg\":data }) \n            })\n        .then(resp => resp.text())\n        .then( (resp) => {\n            updateData(resp);\n        })\n        .catch( (e) => {\n            console.log(`error at useEffect:\\n ${e}`);\n        })\n    }\n    return(\n        <div style={{\n            borderColor: 'red',\n            borderSize: '1em',\n            borderStyle: 'groove'\n        }}>\n            <form>\n                <input type=\"text\" name=\"txt1\" onChange={(e)=>updateData(e.target.value)}/>\n                <input type=\"button\" name=\"btn1\" value=\"Submit btn\" onClick={sendData}/>\n            </form>\n        <div id=\"output\">{data}</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport FormElement from './components/FormElement';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormElement />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}